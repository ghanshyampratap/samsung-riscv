// Include header files
#include <ch32v00x.h>
#include <debug.h>

// Define XOR function
int xor(int bit1, int bit2) {
    return bit1 ^ bit2;
}

// Pin configuration
void GPIO_Config(void) {
    GPIO_InitTypeDef GPIO_InitStructure = {0}; // Structure variable for GPIO configuration
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE); // Enable clock for Port D
    
    // Input pin configuration (Binary Input)
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; // Input pull-up
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    
    // Output pin configuration (Gray Code Output)
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; // Push-pull output
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOD, &GPIO_InitStructure);
}

// Main function
int main(void) {
    uint8_t b0, b1, b2, b3, g0, g1, g2, g3;
    
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
    SystemCoreClockUpdate();
    Delay_Init();
    GPIO_Config();
    
    while (1) {
        // Read binary inputs from GPIO pins
        b3 = GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_7);
        b2 = GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_6);
        b1 = GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_5);
        b0 = GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_4);
        
        // Convert Binary to Gray Code
        g3 = b3;
        g2 = xor(b3, b2);
        g1 = xor(b2, b1);
        g0 = xor(b1, b0);
        
        // Output Gray code to GPIO pins
        GPIO_WriteBit(GPIOD, GPIO_Pin_3, g3 ? SET : RESET);
        GPIO_WriteBit(GPIOD, GPIO_Pin_2, g2 ? SET : RESET);
        GPIO_WriteBit(GPIOD, GPIO_Pin_1, g1 ? SET : RESET);
        GPIO_WriteBit(GPIOD, GPIO_Pin_0, g0 ? SET : RESET);
    }
}
